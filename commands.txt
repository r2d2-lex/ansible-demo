ansible -i hosts.ini -m ping demo
ansible-doc -l - список модулей
ansible-doc community.docker.docker_config - информация по конкретному модулю

AD-hoc команды:
ansible -i hosts.ini -m user -a "name=superuser state=present" demo - пример проверки пользователя на существование
ansible -i hosts.ini -m user -a "name=superuser state=present" demo
ansible -i hosts.ini -m user -a "name=superuser state=present" -b -K demo - создание пользователя
ansible -i hosts.ini -m user -a "name=superuser state=absent" -b demo - удаление пользователя

ansible -i hosts.ini -m user -a "name=superuser state=present" -e "ansible_become=true ansible_become_password=123" demo
____________

Установка docker из playbook docker.yml
ansible-playbook -i hosts.ini docker.yml

DOCKER Swarm
____________

docker node ls
docker node rm nodeuid
docker node ls
docker node inspect machine3
docker node inspect machine3 --pretty

DOCKER Service:
____________

docker service create --name redis redis
docker service ps
docker service inspect redis --pretty
docker service scale redis=2  -запуск двух реплик Redis
docker service logs redis
docker service update redis --image=redis:3.0.2 -обновляем image сервиса

docker service create --secret my_pass --name redis redis
docker service inspect my_pass
docker service rm redis
docker secret rm my_pass

echo '3331111 | 'docker config create my_conf -
docker config inspect my_conf

docker node update server1 --label-add registry=true - Добаляем Label для Server1
docker node inspect server1

Создание сервиса Registry:
docker service create --name registry --publish 5000:5000 --constraint node.labels.registry==true --mount 'type=bind,source=/root/registry,destination=/var/lib/registry' -e REGISTRY_HTTP_ADDR=0.0.0.0:5000 registry:latest
docker push 127.0.0.1:5000/node
docker push 127.0.0.1:5000/node
docker service create --publish 30022:22 --name nodeX --replicas=3 127.0.0.1:5000/node

Если вы хотите, чтобы сервисы были запущены на этом узле, вы можете обновить сервис, чтобы изменить количество реплик или перезапустить его. Например, вы можете использовать команду:
docker service update --force <имя_сервиса>

(--mode replicated):

    При использовании этого режима вы указываете количество реплик, которые хотите запустить.
    Docker Swarm будет создавать и управлять указанным количеством экземпляров сервиса, распределяя их
    по доступным узлам в кластере. Например, если вы укажете --replicas 3, Swarm попытается запустить
    три экземпляра сервиса, и они могут быть размещены на разных узлах, если это возможно

(--mode global):
    В этом режиме Docker Swarm создает один экземпляр сервиса на каждом узле кластера.
    Это означает, что если у вас есть 5 узлов в кластере, то будет запущено 5 экземпляров
    сервиса, по одному на каждом узле. Если вы добавите новый узел
    в кластер, Swarm автоматически запустит экземпляр сервиса и на новом узле
